-- Copyright (c) 2022 K.Awata
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

-- Form !!pmlrun provides one click shortcuts to run PML macro files.
setup form !!pmlrun varchars dialog dock right
    member .undo       is UNDOABLE
    member .menuIsOpen is BOOLEAN
    member .dirs       is ARRAY
    member .editor     is STRING
    member .runext     is STRING
    text   .txtArgs  tagwid 4 'Args' anchor t+l+r width 27 is STRING
    toggle .tglDots  tagwid 3 'All' anchor t+r callback '!this.Init()'
    list   .lstFiles anchor all at xmin.txtArgs ymax call '!this.OnClickList(' width 36 length 16
    track  'DBCHANGED' 'DESICE' 'CATACE' 'PROPCE' 'ISODCE' 'PADDCE' 'DICTCE' call '!this.Track('
exit

-- Constructor sets default values for the members.
define method .pmlrun()
    !this.formtitle = 'PML Runner'
    !this.callback  = '!this.Init()'
    !menu = !this.NewMenu('menu')
    !menu.callback = '!this.BeforePopupMenu()'
    !menu.Add('CALLBACK', 'Open...', '!this.OpenFile()')
    !menu.Add('CALLBACK', 'Run', '!this.RunFile()')
    !menu.Add('SEPARATOR')
    !menu.Add('CALLBACK', 'Refresh', '!this.Init()')
    !this.lstFiles.SetPopup(!menu)
endmethod

-- Init initializes this form.
define method .Init()
    !this.undo = object UNDOABLE()
    !this.menuIsOpen = false
    !this.editor = 'start ""'
    !this.runext = '.mac'
    var !evar evar 'pmlrun'
    if !evar eq '' then
        !evar = '%userprofile%\.pmlrun'
    endif
    !this.dirs.Clear()
    do !dirname values !evar.Split(';')
        skip if !dirname.Trim() eq ''
        !dir = object FILE(!dirname.Trim())
        syscom |if not exist "$!dir" mkdir "$!dir"|
        skip if !dir.Type() ne 'DIRECTORY'
        handle any
            skip
        endhandle
        !this.dirs.Append(object FILE(!dir.PathName() + '\' + !dir.Entry()))
    enddo
    !this.lstFiles.Clear()
    do !dir values !this.dirs
        !this.lstFiles.Add('[' + !dir.Name() + ']', !dir.Name())
        !this.PopulateDir(!dir, 2)
        !init = object FILE(!dir.Name() + '\.init')
        if !init.Exists() then
            $M"$!init"
        endif
    enddo
endmethod

-- Track runs macro that is the same as event name with prefix "." dot.
define method .Track(!form is FORM, !event is STRING)
    do !dir values !this.dirs
        !file = object FILE(!dir.Name() + '\.' + !event)
        if !file.Exists() then
            $M"$!file"
        endif
    enddo
endmethod

-- PopulateDir populates macro files list from the specified directory.
define method .PopulateDir(!dir is FILE, !indent is REAL)
    do !f values !dir.SubDirs()
        !name = !f.Entry()
        skip if not !this.tglDots.val and !name.Substring(1, 1) eq '.'
        var !dtext compose space $!indent |$!name/|
        skip if !dtext.Empty()
        !this.lstFiles.Add(!dtext[1], !f.Name())
        !this.PopulateDir(!f, !indent + 2)
    enddo
    do !f values !dir.Files()
        !name = !f.Entry()
        skip if not !this.tglDots.val and !name.Substring(1, 1) eq '.'
        if !name.MatchWild('*' + !this.runext) then
            !name = !name.Replace(!this.runext, '', -1, 1)
        endif
        var !dtext compose space $!indent |- $!name|
        skip if !dtext.Empty()
        !this.lstFiles.Add(!dtext[1], !f.Name())
    enddo
endmethod

-- BeforePopupMenu is a callback method before opening right click menu.
define method .BeforePopupMenu()
    !this.menuIsOpen = true
endmethod

-- OnClickList is a callback method on click a row in the list.
define method .OnClickList(!gadget is GADGET, !select is STRING)
    if !select ne 'SELECT' then
        return
    endif
    if !this.menuIsOpen then
        !this.menuIsOpen = false
        return
    endif
    !file = object FILE(|$!gadget|)
    if not !file.Exists() then
        !this.Init()
        return
    endif
    if !file.Type() eq 'FILE' then
        if !file.Entry().MatchWild('*' + !this.runext) then
            !this.undo.Add()
            $M"$!file" $!this.txtArgs.val
            !this.undo.EndUndoable()
        else
            syscom |$!this.editor "$!file"|
        endif
    endif
endmethod

-- RunFile runs the selection macro file in the list.
define method .RunFile()
    !file = object FILE(!this.lstFiles.Selection())
    if Unset(!file) then
        return
    endif
    if not !file.Exists() then
        !this.Init()
        return
    endif
    if !file.Type() ne 'FILE' then
        return
    endif
    !this.undo.Add()
    $M"$!file" $!this.txtArgs.val
    !this.undo.Endundoable()
endmethod

-- OpenFile opens the selection file in the list.
define method .OpenFile()
    !file = object FILE(!this.lstFiles.Selection())
    if Unset(!file) then
        return
    endif
    if not !file.Exists() then
        !this.Init()
        return
    endif
    syscom |$!this.editor "$!file"|
endmethod
